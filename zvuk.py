#! /usr/share/env python3

import subprocess
# import wobproxy
from conf import SOUND_MIC, SOUND_SPK

# Piktogramy. Prvn√≠ piktogram m√° v≈ædy znamenat 'mute' za≈ô√≠zen√≠ a dal≈°√≠
# stup≈àuj√≠c√≠ se hlasitost. Na poƒçtu nez√°le≈æ√≠ av≈°ak minimum jsou dva
# vƒçetnƒõ mute piktogramu.
# print(chr(int("1f507",16)))
# MIC = ("ÔÑ±", "ÔÑ∞")
# REPR = ("üîá", "üîà", "üîâ", "üîä")


class Zvuk:
    """Bohu≈æel linux je dost rozt≈ô√≠≈°tƒõn√Ω a nem√° co se t√Ωƒçe zvuku ≈æ√°dn√©
    jednotnƒõj≈°√≠ API. J√° m√°m pulseaudio. Blb√Ω je, ≈æe PA nem√°
    funkƒçn√≠ p≈ô√≠stup ani p≈ôes d-bus. A ve sraƒçk√°ch typu systemd se hrabat
    nebudu. Tak≈æe jsem si ovl√°d√°n√≠ napsal vol√°n√≠m p≈ô√≠mo pacmd(sos√°n√≠
    informac√≠) a pactl(nastavov√°n√≠) p≈ôes subprocess.
    Zkou≈°el jsem to i p≈ôes /proc/asound/. Co≈æ funguje d√≠ky PA velice tƒõ≈æce.
    Nehledƒõ na to, ≈æe PA dovoluje zes√≠len√≠ nad 100%, co≈æ ostatn√≠ tƒõ≈æce nesou(
    asound to o≈ô√≠zne, wobi zhavaruje)
     # Pou≈æit√≠:
        zvukovka = Zvuk()
        print("Mic: {}".format(zvukovka.getmic()))
        print("Rep: {}".format(zvukovka.getspk()))
         Nebo:
        print(zvukovka.getall())
         Anebo:
        print(zvukovka)
         Anebo:
        print(Zvuk())
        p = Zvuk()
        Zvuk().spk = "+2"  # zes√≠len√≠ o dvƒõ procenta
        Zvuk().spk = "mute"
        Zvuk().mic = "MUTE"
        print(Zvuk().spk)
        print(Zvuk().mic)
     """
    def __init__(self):
        self.MIC_CALL = "list-sources"  # vstupn√≠ periferie
        self.SPK_CALL = "list-sinks"  # v√Ωstupn√≠ perif√©rie
        self.MIC_VOL = "set-source-volume"  # nastaven√≠ vstup≈Ø
        self.MIC_MUTE = "set-source-mute"  # nastaven√≠ mute vstupu
        self.SOURCE = "@DEFAULT_SOURCE@"  # defaultn√≠ vstup
        self.SPK_VOL = "set-sink-volume"  # nastaven√≠ v√Ωstup≈Ø
        self.SPK_MUTE = "set-sink-mute"  # mute v√Ωstupu
        self.SINK = "@DEFAULT_SINK@"  # defaultn√≠ v√Ωstup
        self.piktogramy = ()
        # self.volani = volani
        # self.__delka = len(self.piktogramy)-1
        self.__delka = 0  # len(self.piktogramy) - 1
        self.__flag = False  # flag ukazuje ƒçi jsme v aktu√°ln√≠ periferii
        self.__pos = 1
        self.__levy = 0
        self.__pravy = 0
        self.__volume = 0
        self.__table = {32: None, 37: None}  # znaky translate tabulky

    def __getitem(self, volani):
        # metoda vrac√≠ volume a mute aktu√°ln√≠ perif√©rie
        self.__delka = len(self.piktogramy) - 1
        descriptor = subprocess.run(["pacmd", volani],
                                    stdout=subprocess.PIPE,
                                    check=True, text=True)
        for i in descriptor.stdout.splitlines():
            if "* index:" in i:  # hvƒõzdiƒçka a index ukazuje na aktu√°lnƒõ
                # pou≈æ√≠vanou periferii. Pokud na nƒõ naraz√≠me
                self.__flag = True  # nastav√≠me flag na naƒç√≠t√°n√≠ informac√≠
                # z v√Ωstupu
            if self.__flag:
                if "muted: yes" in i:  # pokud je perif√©rie muted. Nastav
                    # piktogram z nult√© pozice. A nastav flag aby se nenaƒç√≠tali
                    # dal≈°√≠ fale≈°n√© informace.
                    self.__pos = 0
                    self.__flag = False
                elif "volume:" in i:  # najdeme ≈ô√°dky s "volume"
                    if "base" not in i:  # vylouƒç√≠me nechtƒõn√Ω volume info
                        # Naƒçteme info lev√©ho kan√°lu
                        self.__levy = int(i.translate(self.__table).
                                          split("/")[1])
                        # Info prav√©ho kan√°lu
                        self.__pravy = int(i.translate(self.__table).
                                           split("/")[3])
                        # Udƒõl√°me z nich pr≈Ømƒõr
                        self.__volume = (self.__levy + self.__pravy) // 2
                        # A nastav√≠me pozici piktogramu
                        self.__pos = int(self.__volume // (100 /
                                                           self.__delka) + 1)
                        if self.__pos == 0:
                            self.__pos = 1
                        elif self.__pos > self.__delka:
                            self.__pos = self.__delka

        if self.__flag:
            # pokud je flag pravdiv√Ω vr√°t√≠me pr≈Ømƒõr volume a piktogram "s√≠ly"
            return "{:3}% {:}".format(self.__volume,
                                      self.piktogramy[self.__pos])
        else:
            # flag nen√≠, v√Ωstup je mute. Po≈°lem jen prv√≠ mute piktogram
            # form√°tovan√Ω aby nel√≠tali informace na li≈°tƒõ sem tam.
            return "{:>6}".format(self.piktogramy[0])

    @staticmethod
    def __vola(a, b, c):
        # nastavovac√≠ metoda
        subprocess.run(['pactl', a, b, c])
        return

    @property
    def mic(self):
        # opt√°me se na vstupn√≠ za≈ô√≠zen√≠
        return self.getmic()

    def getmic(self):
        # opt√°me se na vstupn√≠ za≈ô√≠zen√≠
        self.piktogramy = SOUND_MIC
        return self.__getitem(self.MIC_CALL)

    @mic.setter
    def mic(self, a: str):
        # nastav√≠me vstup
        a = a.lower()
        if "+" in a:  # p≈ôi plusu p≈ôid√°me
            self.__vola(self.MIC_VOL, self.SOURCE, a+"%")
        elif "-" in a:  # p≈ôi m√≠nusu ubereme
            self.__vola(self.MIC_VOL, self.SOURCE, a+"%")
        elif "mute" in a:  # p≈ôi mute p≈ôepneme mute
            self.__vola(self.MIC_MUTE, self.SOURCE, "toggle")
        return

    @property
    def spk(self):
        # opt√°me se na v√Ωstup
        return self.getspk()

    def getspk(self):
        # opt√°me se na v√Ωstup
        self.piktogramy = SOUND_SPK
        return self.__getitem(self.SPK_CALL)

    @spk.setter
    def spk(self, a: str):
        self.setspk(a)
        return 
    
    def setspk(self, a: str):
        # nastav√≠me v√Ωstup
        a = a.lower()
        if "+" in a:  # p≈ôi plusu p≈ôid√°me zvuk
            self.__vola(self.SPK_VOL, self.SINK, a + "%")
        elif "-" in a:  # p≈ôi m√≠nusu ubereme zvuk
            self.__vola(self.SPK_VOL, self.SINK, a + "%")
        elif "mute" in a:  # p≈ôi mute p≈ôepneme mute zvuku
            self.__vola(self.SPK_MUTE, self.SINK, "toggle")
        else:
            return
        self.getrepr()
        return

    def getall(self):
        # uka≈æ nastaven√≠ v√Ωstupu a vstupu z√°rove≈à
        m = self.getmic()
        r = self.getspk()
        return r + m

    def getrepr(self):
        self.getspk()
        # wobproxy.wob(self.__volume)
        return self.__volume

    def open_extern(self, a):
        subprocess.run(['swaymsg', 'exec', 'pavucontrol'],
                       stdout=subprocess.DEVNULL)
        return self, a

    def __repr__(self):  # proxy getall
        return self.getall()


# Zvuk().spk="+2"
